영속성 컨텍스트


JPA에서 가장 중요한 2가지
* 객체와 관계형 데이터 베이스 매핑하기(설계영역)
(Object Relational Mapping)
*영속성 컨텍스트


EntityManagerFactory & EntityManager


영속성 컨텍스트
*JPA를 이해하는데 가장 중요한 용어
*"엔티티를 영구 저장하는 환경"이라는 뜻
* EntityManager.persist(entity);이 코드의 뜻은 '영속성 컨텍스트를 통해 인자로 받은 entity를 영속화 한다는 뜻(DB에 저장한다는 뜻은 아님,실제로 DB에 저장이되지 않음),즉 Entity를 영속성 컨텍스트라는 곳에 저장한다는 뜻'



영속성 매니저? 영속성 컨텍스트?
* 영속성 컨텍스트는 논리적인 개념
* 눈에 보이지 않는다.
* 엔티티 매니저를 통해서 영속성 컨텍스트에 접근


(J2SE환경)
엔티티메니저를 생성하면 이에 따른 영속성컨텍스트(PersistenceContext)가 생성되고 맵핑됨(엔티티매니져1:영속성컨텍스트1)

(J2EE환경, 스프링 프레임워크 같은 컨테이너 환경)
엔티티메니저를 생성하면 이에 따른 영속성컨텍스트(PersistenceContext)가 생성되고 맵핑됨(엔티티매니져N:영속성컨텍스트1)


엔티티의 생명주기
* 비영속(new/transient)
=> 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태(new Member())
* 영속(managed)
=> 영속성 컨텍스트에 관리되는 상태(ex.   em.persist(member);// persist를 하는 시점에 영속성 컨텍스트에 관리되는 상태)
* 준영속(detached)
=> 영속성 컨텍스트에 저장되었다가 분리된 상태
*삭제(removed)
=>삭제된 상태

영속성 컨텍스트의 이점(버퍼도 가능하고, 캐싱도 가능하고)
* 엔티티 조회,1차 캐시-사용자의 요청 건by건별로 소멸되고 생성되기 때문에 크게 이점이 없음.
*영속 엔티티의 동일성(identity)보장
=> 1차캐시로 반복 가능한 읽기(repeatable read) 등급의 트랜잭션 격리 수준을 데이터베이스가 아닌 애플리케이션 차원에서 제공
*트랜잭션을 지원하는 쓰기지연(transactional write-behind)
=> persist를 실행하는 순간 DB에 SQL을 보내는 것이 아닌, commit을 할 때 SQL을 보냄
=> 영속 컨텍스트(PersistenceContext) 내에는 '쓰기 지연 SQL 저장소'라는 것이 존재
*변경감지(Dirty Checking)
=> 엔티티 수정 변경 감지.
=> 엔티티메니저를 commit 하게 되면,
### 1. flush()수행
### 2. Entity와 스냅샷을 비교
### 3. (앤티티 객체가 변경되었다면) Update SQL을 '쓰기 지연 SQL 저장소'에 저장 
### 4. '쓰기 지연 SQL 저장소'에 모두 보관이 완료되었다면, 해당 내용을 DB에 저장한다.(flush())
### 5. Commit 수행
*지연로딩(Lazy Loading)


플러시: 영속성 컨텍스트의 변경내용을 데이터베이스에 반영(동기화)
*플러시 발생
=> 변경감지
=> 수정된 엔티티 쓰기 지연 SQL 저장소에 등록
=> 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송(등록, 수정,삭제 쿼리)
*영속성 컨텍스트를 플러시 하는 방법
=> em.flush() - 직접호출
=> 트랜잭션 커밋 - 플러시 자동호출
=> JPQL 쿼리 실행 - 플러시 자동호출
* 플러시 모드 옵션 em.setFlushMode(FlushModeType.COMMIT)
=> FlushModeType.AUTO (기본 타입): 커밋이나 쿼리를 실행할 때 플러시
=> FlushModeType.COMMMIT: 커밋할 때만 플러시
! 트랜잭션이라는 작업단위가 중요함-> 커밋 직전에만 동기화 해주면 됨


준영속 상태
* 영속(persist,find 등을 통해 컨텍스트에 등록해놓은 상태) -> 준영속
* 영속상태의 Entity가 영속성 컨텍스트에서 분리(detached)
* 영속성 컨텍스트가 제공하는 기능을 사용 못함

준영속 상태로 만드는 방법
* em.detached(entity): 특정 엔티티만 준영속 상태로 전환
* em.clear(): 영속성 컨텍스트를 완전 초기화
* em.close(): 영속성 컨텍스트를 종료