기본적으로 H2 데이터베이스 설치

# http://www.h2database.com
# 최고의 실습용 DB
# 가볍다(1.5M)
# 웹용 쿼리툴 제공
# MySQL,Oracle 데이터베이스 시뮬레이션 제공
# 시퀀스, Auto increment 기능 지원
# 다운 받은 H2 DB의 버젼과 일치한 라이브러리 버젼으로 의존성을 추가해야 한다.

메이븐 설치
# https://maven.apache.org
# 자바라이브러리, 빌드관리
# 라이브러리 자동 다운로드 및 의존성 관리
# 최근에는 Gradle이 점점 유명해짐

프로젝트 생성
# 자바 8 이상
# 메이븐 설정
# groupId:jpa-basic
# artifactId: ex1-hello-jpa
# version: 1.0.0


!!!!!!! Spring Framework 버젼에 따른 라이브러리 호환 버젼 알아보기
# https://spring.io/projects/spring-boot#learn 에 들어가서 사용할 프레임워크의 버젼의 'Reference Doc.'을 클릭하면 아래 라이브러리명과 버젼이 명시되어 있다. ex) 'org.hibernate'
# https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html#appendix.dependency-versions


JPA를 사용하기 위한 프로젝트 설정
#persistence.xml
*/META-INF/persistence.xml 위치
* 'persistence-unit name="이름"'으로 이름 지정

JPA는 특정 DB에 종속적이지 X


JPA의 실행 순서
# Persistence.class에서 '/META-INF/persistence.xml'의 설정 정보를 조회하여 EntityManagerFactory라는 Class를 만들어 냄. 이후부터는 필요할 때마다 EntityManager를 찍어냄

JPA를 사용하면 엔티티 객체를 중심으로 개발
# 문제는 검색 쿼리
# 검색을 할 때에도, 테이블이 아닌 엔티티 객체를 대상으로 검색
# 모든 DB 데이터를 객체로 변환해서 검색하는 것은 불가능
# 애플리케이션이 필요한 데이터만 DB에서 불러오려면 결국 검색조건이 포험된 SQL이 필요한


JPQL
# JPA는 SQL를 추상화한 JPQL이라는 객체 지향 쿼리언어 지원
# SQL 문법과 유사한, SELECT, FROM, WHERE, GROUP BY, HAVING, JOIN 지원
# JPQL은 엔티티 객체를 대상으로 쿼리
# SQL은 데이터베이스 테이블을 대상으로 쿼리
# 테이블이 아닌 객체를 대상으로 검색하는 객체 지향 쿼리이다.
# SQL을 추상화해서 특정 데이터베이스 SQL에 의존 X
# JPQL을 한마디로 정의하면 객체 지향 SQL


!! intelliJ에서 컨트롤 + 알트 + V를 누르면 변수 받는 부분을 자동완성 해준다.
!! intelliJ에서 알트 + insert 를 누르면 Getter Setter를 자동 완성해준다.