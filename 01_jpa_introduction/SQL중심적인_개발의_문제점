SQL 중심의 개발에 문제점
- 객체에 대한 수정(컬럼추가 및 제거) 등에 대한 추가 작업이 많이 필요 하다.(맴버 객체에 tel이라는 전화번호를 추가하려면 CRUD 등 최소 4개 이상 추가해줘야한다)
=> SQL에 의존적인 개발을 피하기 어려움

- 패러다임의 불일치
=> 객체지향프로그래밍은 추상화, 캡슐화, 정보은닉, 상속, 다형성 등 시스템의 복잡성을 제어할 수 있는 다양한 장치들을 제공.
=> 현실적 대안은 RDB
=> 객체와 RDB의 차이 :
	1. 상속: 객체는 상속할 수 있으나, RDB의 경우 상속 받는 테이블의 Key를 일일이 가지고 있어야하고, 필요시, Join을 해야한다.
	2. 연관관계 :  객체는 참조로 연관관계를 맺을 수 있다.
	3.데이터 타입
	4.데이터 식별 방법
=> 엔티티 신뢰문제:
	1. 이미 작성된 쿼리는 객체끼리 참조를 하고 있다해도, 쿼리에 작성된 범위까지만 객체를 가져올 수 있다.(모든 객체는 미리 불어올 수 없다)

- 계층형 아키텍쳐
=> 진정한 의미의 계층분할이 어렵다.

-비교하기
=> DB로부터 같은 Key값으로 객체를 조회해서 두개의 객체를 비교하면 같은 내용이나, 다르다고 인식한다. 그러나, 컬렉션에서 ID로 조회할 경우 같은 인스턴스로 인식한다.

- 객체답게 모델링 할수록 맵핑 작업만 늘어난다.



* 위 문제들을 해결(객체의 참조처럼 RDB를 핸들링하는 방법 : Java Persistence API)